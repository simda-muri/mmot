{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Barycenter of MNIST Digits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from mmot import MMOTSolver\n",
    "\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "import itertools"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Download and open the MNIST dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "vscode": {
     "languageId": "markdown"
    }
   },
   "outputs": [],
   "source": [
    "import hashlib \n",
    "import os \n",
    "import requests \n",
    "import gzip\n",
    "\n",
    "#fetch data (adapted from https://github.com/geohot/ai-notebooks/blob/master/mnist_from_scratch.ipynb)\n",
    "path='./'\n",
    "def fetch(url):\n",
    "    fp = os.path.join(path, hashlib.md5(url.encode('utf-8')).hexdigest())\n",
    "    if os.path.isfile(fp):\n",
    "        with open(fp, \"rb\") as f:\n",
    "            data = f.read()\n",
    "    else:\n",
    "        with open(fp, \"wb\") as f:\n",
    "            data = requests.get(url).content\n",
    "            f.write(data)\n",
    "    return np.frombuffer(gzip.decompress(data), dtype=np.uint8).copy()\n",
    "\n",
    "digits = fetch(\"http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\")[0x10:].reshape((-1, 28, 28))\n",
    "labels = fetch(\"http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\")[8:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot a few samples of the digit we're interested in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x360 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "desired_digit = 3\n",
    "inds = np.where(labels==desired_digit)[0]\n",
    "\n",
    "num_plot = 5\n",
    "fig,axs = plt.subplots(ncols=num_plot, sharey=True, figsize=(num_plot*5,5))\n",
    "for i in range(num_plot):\n",
    "    axs[i].imshow(digits[inds[i],:,:],cmap='Greys')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extract digits with similar total measure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grid of size n1 x n2\n",
    "n1 = digits.shape[1]   # x axis\n",
    "n2 = digits.shape[2]   # y axis\n",
    "\n",
    "x, y = np.meshgrid(np.linspace(0.5/n1,1-0.5/n1,n1), np.linspace(0.5/n2,1-0.5/n1,n2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "unroll_node = 0\n",
    "\n",
    "num_digits = 10 \n",
    "sums = np.array([np.sum(digits[i,:,:]) for i in inds])\n",
    "\n",
    "val = np.sum(digits[inds[0],:,:])\n",
    "\n",
    "sorted_inds = inds[np.argsort(np.abs(sums-val))]\n",
    "measures = [digits[sorted_inds[i],:,:]* (n1*n2/np.sum(digits[sorted_inds[i],:,:])) for i in range(num_digits)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the edge list for the barycenter problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "edge_list = []\n",
    "for i in range(num_digits):\n",
    "    for j in range(i+1,num_digits):\n",
    "        edge_list += [[i,j]]\n",
    "\n",
    "weights = np.ones(num_digits)/num_digits\n",
    "prob = MMOTSolver(measures, edge_list, x, y, unroll_node, weights)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solve the problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration, StepSize,        Cost,        Error,  Line Its\n",
      "next_root 0 =  0\n",
      "next_root 1 =  0\n",
      "next_root 2 =  0\n",
      "next_root 3 =  0\n",
      "next_root 4 =  0\n",
      "next_root 5 =  0\n",
      "next_root 6 =  0\n",
      "next_root 7 =  0\n",
      "next_root 8 =  0\n",
      "        0,   0.0008,  1.2998e-04,   1.0349e+00,         8\n",
      "next_root 0 =  1\n",
      "next_root 0 =  2\n",
      "next_root 0 =  3\n",
      "next_root 0 =  4\n",
      "next_root 0 =  5\n",
      "next_root 0 =  6\n",
      "next_root 0 =  7\n",
      "next_root 0 =  8\n",
      "next_root 0 =  9\n",
      "next_root 1 =  9\n",
      "next_root 0 =  10\n",
      "next_root 1 =  10\n",
      "       10,   0.0012,  1.2499e-03,   1.5150e-01,         1\n",
      "next_root 0 =  11\n",
      "next_root 0 =  12\n",
      "next_root 0 =  13\n",
      "next_root 0 =  14\n",
      "next_root 0 =  15\n",
      "next_root 0 =  16\n",
      "next_root 0 =  17\n",
      "next_root 1 =  17\n",
      "next_root 2 =  17\n",
      "next_root 0 =  18\n",
      "next_root 0 =  19\n",
      "next_root 0 =  20\n",
      "next_root 1 =  20\n",
      "       20,   0.0009,  1.4826e-03,   4.6731e-02,         1\n",
      "next_root 0 =  21\n",
      "next_root 0 =  22\n",
      "next_root 0 =  23\n",
      "next_root 1 =  23\n",
      "next_root 0 =  24\n",
      "next_root 0 =  25\n",
      "next_root 0 =  26\n",
      "next_root 1 =  26\n",
      "next_root 0 =  27\n",
      "next_root 0 =  28\n",
      "next_root 0 =  29\n",
      "next_root 1 =  29\n",
      "next_root 0 =  30\n",
      "       30,   0.0007,  1.5566e-03,   4.0157e-02,         0\n",
      "next_root 0 =  31\n",
      "next_root 0 =  32\n",
      "next_root 1 =  32\n",
      "next_root 0 =  33\n",
      "next_root 0 =  34\n",
      "next_root 0 =  35\n",
      "next_root 0 =  36\n",
      "next_root 1 =  36\n",
      "next_root 0 =  37\n",
      "next_root 0 =  38\n",
      "next_root 0 =  39\n",
      "next_root 1 =  39\n",
      "next_root 0 =  40\n",
      "       40,   0.0006,  1.6275e-03,   4.0973e-02,         0\n",
      "next_root 0 =  41\n",
      "next_root 0 =  42\n",
      "next_root 1 =  42\n",
      "next_root 0 =  43\n",
      "next_root 0 =  44\n",
      "next_root 0 =  45\n",
      "next_root 0 =  0\n",
      "next_root 0 =  1\n",
      "next_root 0 =  2\n",
      "next_root 0 =  3\n",
      "next_root 1 =  3\n",
      "next_root 0 =  4\n",
      "       50,   0.0009,  1.7358e-03,   3.2187e-02,         0\n",
      "next_root 0 =  5\n",
      "next_root 1 =  5\n",
      "next_root 0 =  6\n",
      "next_root 0 =  7\n",
      "next_root 1 =  7\n",
      "next_root 0 =  8\n",
      "next_root 0 =  9\n",
      "next_root 0 =  10\n",
      "next_root 0 =  11\n",
      "next_root 1 =  11\n",
      "next_root 0 =  12\n",
      "next_root 0 =  13\n",
      "next_root 1 =  13\n",
      "next_root 0 =  14\n",
      "       60,   0.0003,  1.7963e-03,   2.8782e-02,         0\n",
      "next_root 0 =  15\n",
      "next_root 0 =  16\n",
      "next_root 0 =  17\n",
      "next_root 0 =  18\n",
      "next_root 0 =  19\n",
      "next_root 1 =  19\n",
      "next_root 0 =  20\n",
      "next_root 0 =  21\n",
      "next_root 0 =  22\n",
      "next_root 1 =  22\n",
      "next_root 0 =  23\n",
      "next_root 0 =  24\n",
      "       70,   0.0005,  1.8271e-03,   2.7783e-02,         0\n",
      "next_root 0 =  25\n",
      "next_root 0 =  26\n",
      "next_root 1 =  26\n",
      "next_root 0 =  27\n",
      "next_root 0 =  28\n",
      "next_root 0 =  29\n",
      "next_root 1 =  29\n",
      "next_root 0 =  30\n",
      "next_root 0 =  31\n",
      "next_root 0 =  32\n",
      "next_root 1 =  32\n",
      "next_root 0 =  33\n",
      "next_root 1 =  33\n",
      "next_root 0 =  34\n",
      "       80,   0.0002,  1.8805e-03,   2.8257e-02,         0\n",
      "next_root 0 =  35\n",
      "next_root 0 =  36\n",
      "next_root 0 =  37\n",
      "next_root 0 =  38\n",
      "next_root 1 =  38\n",
      "next_root 0 =  39\n",
      "next_root 0 =  40\n",
      "next_root 0 =  41\n",
      "next_root 0 =  42\n",
      "next_root 1 =  42\n",
      "next_root 0 =  43\n",
      "next_root 0 =  44\n",
      "       90,   0.0003,  1.9226e-03,   2.9543e-02,         0\n",
      "next_root 0 =  45\n",
      "next_root 0 =  0\n",
      "next_root 1 =  0\n",
      "next_root 0 =  1\n",
      "next_root 1 =  1\n",
      "next_root 0 =  2\n",
      "next_root 0 =  3\n",
      "next_root 0 =  4\n",
      "next_root 0 =  5\n",
      "next_root 1 =  5\n",
      "next_root 0 =  6\n",
      "next_root 0 =  7\n",
      "next_root 1 =  7\n",
      "next_root 0 =  8\n",
      "      100,   0.0001,  1.9420e-03,   2.8192e-02,         0\n",
      "next_root 0 =  9\n",
      "next_root 0 =  10\n",
      "next_root 0 =  11\n",
      "next_root 0 =  12\n",
      "next_root 0 =  13\n",
      "next_root 1 =  13\n",
      "next_root 0 =  14\n",
      "next_root 0 =  15\n",
      "next_root 0 =  16\n",
      "next_root 0 =  17\n",
      "next_root 1 =  17\n",
      "next_root 0 =  18\n",
      "      110,   0.0002,  1.9607e-03,   2.6876e-02,         0\n",
      "next_root 0 =  19\n",
      "next_root 0 =  20\n",
      "next_root 1 =  20\n",
      "next_root 0 =  21\n",
      "next_root 0 =  22\n",
      "next_root 0 =  23\n",
      "next_root 0 =  24\n",
      "next_root 1 =  24\n",
      "next_root 0 =  25\n",
      "next_root 0 =  26\n",
      "next_root 0 =  27\n",
      "next_root 0 =  28\n",
      "next_root 1 =  28\n",
      "      120,   0.0001,  1.9792e-03,   2.6153e-02,         1\n",
      "next_root 0 =  29\n",
      "next_root 0 =  30\n",
      "next_root 0 =  31\n",
      "next_root 0 =  32\n",
      "next_root 1 =  32\n",
      "next_root 0 =  33\n",
      "next_root 1 =  33\n",
      "next_root 0 =  34\n",
      "next_root 0 =  35\n",
      "next_root 0 =  36\n",
      "next_root 0 =  37\n",
      "next_root 0 =  38\n",
      "next_root 1 =  38\n",
      "      130,   0.0001,  1.9903e-03,   2.7401e-02,         1\n",
      "next_root 0 =  39\n",
      "next_root 0 =  40\n",
      "next_root 0 =  41\n",
      "next_root 0 =  42\n",
      "next_root 1 =  42\n",
      "next_root 0 =  43\n",
      "next_root 0 =  44\n",
      "next_root 0 =  45\n",
      "next_root 0 =  0\n",
      "next_root 1 =  0\n",
      "next_root 0 =  1\n",
      "next_root 1 =  1\n",
      "next_root 0 =  2\n",
      "next_root 1 =  2\n",
      "      140,   0.0000,  2.0004e-03,   2.7720e-02,         1\n",
      "next_root 0 =  3\n",
      "next_root 0 =  4\n",
      "next_root 0 =  5\n",
      "next_root 0 =  6\n",
      "next_root 0 =  7\n",
      "next_root 1 =  7\n",
      "next_root 0 =  8\n",
      "next_root 0 =  9\n",
      "next_root 0 =  10\n",
      "next_root 0 =  11\n",
      "next_root 1 =  11\n",
      "next_root 0 =  12\n",
      "      150,   0.0001,  2.0087e-03,   2.7586e-02,         0\n",
      "next_root 0 =  13\n",
      "next_root 0 =  14\n",
      "next_root 0 =  15\n",
      "next_root 1 =  15\n",
      "next_root 0 =  16\n",
      "next_root 0 =  17\n",
      "next_root 0 =  18\n",
      "next_root 0 =  19\n",
      "next_root 0 =  20\n",
      "next_root 1 =  20\n",
      "next_root 0 =  21\n",
      "next_root 0 =  22\n",
      "      160,   0.0001,  2.0155e-03,   2.7085e-02,         0\n",
      "next_root 0 =  23\n",
      "next_root 0 =  24\n",
      "next_root 1 =  24\n",
      "next_root 0 =  25\n",
      "next_root 0 =  26\n",
      "next_root 0 =  27\n",
      "next_root 0 =  28\n",
      "next_root 1 =  28\n",
      "next_root 0 =  29\n",
      "next_root 0 =  30\n",
      "next_root 0 =  31\n",
      "next_root 0 =  32\n",
      "next_root 1 =  32\n",
      "      170,   0.0001,  2.0205e-03,   2.7040e-02,         1\n",
      "next_root 0 =  33\n",
      "next_root 1 =  33\n",
      "next_root 0 =  34\n",
      "next_root 0 =  35\n",
      "next_root 0 =  36\n",
      "next_root 0 =  37\n",
      "next_root 1 =  37\n",
      "next_root 0 =  38\n",
      "next_root 0 =  39\n",
      "next_root 0 =  40\n",
      "next_root 0 =  41\n",
      "next_root 0 =  42\n",
      "next_root 1 =  42\n",
      "      180,   0.0001,  2.0259e-03,   2.7703e-02,         1\n",
      "next_root 0 =  43\n",
      "next_root 0 =  44\n",
      "next_root 0 =  45\n",
      "next_root 0 =  0\n",
      "next_root 1 =  0\n",
      "next_root 0 =  1\n",
      "next_root 1 =  1\n",
      "next_root 0 =  2\n",
      "next_root 1 =  2\n",
      "next_root 0 =  3\n",
      "next_root 0 =  4\n",
      "next_root 0 =  5\n",
      "next_root 1 =  5\n",
      "next_root 0 =  6\n",
      "      190,   0.0000,  2.0300e-03,   2.7548e-02,         0\n",
      "next_root 0 =  7\n",
      "next_root 0 =  8\n",
      "next_root 0 =  9\n",
      "next_root 0 =  10\n",
      "next_root 0 =  11\n",
      "next_root 1 =  11\n",
      "next_root 0 =  12\n",
      "next_root 0 =  13\n",
      "next_root 1 =  13\n",
      "next_root 0 =  14\n",
      "next_root 0 =  15\n",
      "next_root 0 =  16\n",
      "      200,   0.0000,  2.0350e-03,   2.7808e-02,         0\n",
      "next_root 0 =  17\n",
      "next_root 0 =  18\n",
      "next_root 0 =  19\n",
      "next_root 1 =  19\n",
      "next_root 0 =  20\n",
      "next_root 0 =  21\n",
      "next_root 0 =  22\n",
      "next_root 0 =  23\n",
      "next_root 0 =  24\n",
      "next_root 1 =  24\n",
      "next_root 0 =  25\n",
      "next_root 0 =  26\n",
      "next_root 1 =  26\n",
      "      210,   0.0000,  2.0386e-03,   2.7053e-02,         1\n",
      "next_root 0 =  27\n",
      "next_root 0 =  28\n",
      "next_root 0 =  29\n",
      "next_root 1 =  29\n",
      "next_root 0 =  30\n",
      "next_root 0 =  31\n",
      "next_root 0 =  32\n",
      "next_root 1 =  32\n",
      "next_root 0 =  33\n",
      "next_root 0 =  34\n",
      "next_root 0 =  35\n",
      "next_root 0 =  36\n",
      "      220,   0.0000,  2.0425e-03,   2.7091e-02,         0\n",
      "next_root 0 =  37\n",
      "next_root 1 =  37\n",
      "next_root 0 =  38\n",
      "next_root 0 =  39\n",
      "next_root 0 =  40\n",
      "next_root 1 =  40\n",
      "next_root 0 =  41\n",
      "next_root 0 =  42\n",
      "next_root 0 =  43\n",
      "next_root 0 =  44\n",
      "next_root 0 =  45\n",
      "next_root 0 =  0\n",
      "next_root 1 =  0\n",
      "      230,   0.0000,  2.0447e-03,   2.7168e-02,         1\n",
      "next_root 0 =  1\n",
      "next_root 1 =  1\n",
      "next_root 2 =  1\n",
      "next_root 0 =  2\n",
      "next_root 1 =  2\n",
      "next_root 0 =  3\n",
      "next_root 1 =  3\n",
      "next_root 0 =  4\n",
      "next_root 0 =  5\n",
      "next_root 1 =  5\n",
      "next_root 0 =  6\n",
      "next_root 0 =  7\n",
      "next_root 1 =  7\n",
      "next_root 0 =  8\n",
      "next_root 0 =  9\n",
      "next_root 0 =  10\n",
      "      240,   0.0000,  2.0456e-03,   2.7954e-02,         0\n",
      "next_root 0 =  11\n",
      "next_root 1 =  11\n",
      "next_root 0 =  12\n",
      "next_root 0 =  13\n",
      "next_root 1 =  13\n",
      "next_root 0 =  14\n",
      "next_root 0 =  15\n",
      "next_root 1 =  15\n",
      "next_root 0 =  16\n",
      "next_root 0 =  17\n",
      "next_root 0 =  18\n",
      "next_root 0 =  19\n",
      "next_root 1 =  19\n",
      "next_root 0 =  20\n",
      "      250,   0.0000,  2.0472e-03,   2.7679e-02,         0\n",
      "next_root 0 =  21\n",
      "next_root 0 =  22\n",
      "next_root 0 =  23\n",
      "next_root 1 =  23\n",
      "next_root 0 =  24\n",
      "next_root 1 =  24\n",
      "next_root 0 =  25\n",
      "next_root 0 =  26\n",
      "next_root 0 =  27\n",
      "next_root 0 =  28\n",
      "next_root 1 =  28\n",
      "next_root 0 =  29\n",
      "next_root 0 =  30\n",
      "      260,   0.0000,  2.0484e-03,   2.7547e-02,         0\n",
      "next_root 0 =  31\n",
      "next_root 0 =  32\n",
      "next_root 1 =  32\n",
      "next_root 0 =  33\n",
      "next_root 1 =  33\n",
      "next_root 0 =  34\n",
      "next_root 0 =  35\n",
      "next_root 1 =  35\n",
      "next_root 0 =  36\n",
      "next_root 0 =  37\n",
      "next_root 0 =  38\n",
      "next_root 1 =  38\n",
      "next_root 0 =  39\n",
      "next_root 0 =  40\n",
      "      270,   0.0000,  2.0494e-03,   2.7256e-02,         0\n",
      "next_root 0 =  41\n",
      "next_root 0 =  42\n",
      "next_root 1 =  42\n",
      "next_root 0 =  43\n",
      "next_root 0 =  44\n",
      "next_root 0 =  45\n",
      "next_root 0 =  0\n",
      "next_root 1 =  0\n",
      "next_root 0 =  1\n",
      "next_root 1 =  1\n",
      "next_root 2 =  1\n",
      "next_root 0 =  2\n",
      "next_root 1 =  2\n",
      "next_root 2 =  2\n",
      "next_root 0 =  3\n",
      "next_root 1 =  3\n",
      "next_root 0 =  4\n",
      "next_root 1 =  4\n",
      "      280,   0.0000,  2.0503e-03,   2.7424e-02,         1\n",
      "next_root 0 =  5\n",
      "next_root 1 =  5\n",
      "next_root 2 =  5\n",
      "next_root 0 =  6\n",
      "next_root 1 =  6\n",
      "next_root 0 =  7\n",
      "next_root 1 =  7\n",
      "next_root 2 =  7\n",
      "next_root 0 =  8\n",
      "next_root 1 =  8\n",
      "next_root 0 =  9\n",
      "next_root 1 =  9\n",
      "next_root 0 =  10\n",
      "next_root 1 =  10\n",
      "next_root 0 =  11\n",
      "next_root 1 =  11\n",
      "next_root 0 =  12\n",
      "next_root 1 =  12\n",
      "next_root 0 =  13\n",
      "next_root 1 =  13\n",
      "next_root 0 =  14\n",
      "next_root 1 =  14\n",
      "      290,   0.0000,  2.0511e-03,   2.7508e-02,         1\n",
      "next_root 0 =  15\n",
      "next_root 1 =  15\n",
      "next_root 0 =  16\n",
      "next_root 1 =  16\n",
      "next_root 0 =  17\n",
      "next_root 1 =  17\n",
      "next_root 0 =  18\n",
      "next_root 1 =  18\n",
      "next_root 0 =  19\n",
      "next_root 1 =  19\n",
      "next_root 0 =  20\n",
      "next_root 1 =  20\n",
      "next_root 0 =  21\n",
      "next_root 1 =  21\n",
      "next_root 0 =  22\n",
      "next_root 1 =  22\n",
      "next_root 0 =  23\n",
      "next_root 0 =  24\n",
      "next_root 1 =  24\n",
      "      300,   0.0000,  2.0520e-03,   2.7258e-02,         1\n",
      "next_root 0 =  25\n",
      "next_root 0 =  26\n",
      "next_root 1 =  26\n",
      "next_root 0 =  27\n",
      "next_root 1 =  27\n",
      "next_root 0 =  28\n",
      "next_root 1 =  28\n",
      "next_root 0 =  29\n",
      "next_root 1 =  29\n",
      "next_root 0 =  30\n",
      "next_root 1 =  30\n",
      "next_root 0 =  31\n",
      "next_root 0 =  32\n",
      "next_root 1 =  32\n",
      "next_root 2 =  32\n",
      "next_root 0 =  33\n",
      "next_root 1 =  33\n",
      "next_root 2 =  33\n",
      "next_root 0 =  34\n",
      "next_root 1 =  34\n",
      "      310,   0.0000,  2.0527e-03,   2.7769e-02,         1\n",
      "next_root 0 =  35\n",
      "next_root 1 =  35\n",
      "next_root 0 =  36\n",
      "next_root 1 =  36\n",
      "next_root 0 =  37\n",
      "next_root 1 =  37\n",
      "next_root 0 =  38\n",
      "next_root 1 =  38\n",
      "next_root 0 =  39\n",
      "next_root 1 =  39\n",
      "next_root 0 =  40\n",
      "next_root 1 =  40\n",
      "next_root 0 =  41\n",
      "next_root 1 =  41\n",
      "next_root 0 =  42\n",
      "next_root 1 =  42\n",
      "next_root 0 =  43\n",
      "next_root 1 =  43\n",
      "next_root 0 =  44\n",
      "next_root 1 =  44\n",
      "      320,   0.0000,  2.0535e-03,   2.7419e-02,         1\n",
      "next_root 0 =  45\n",
      "next_root 1 =  45\n",
      "next_root 0 =  0\n",
      "next_root 1 =  0\n",
      "next_root 2 =  0\n",
      "next_root 0 =  1\n",
      "next_root 1 =  1\n",
      "next_root 2 =  1\n",
      "next_root 0 =  2\n",
      "next_root 1 =  2\n",
      "next_root 2 =  2\n",
      "next_root 3 =  2\n",
      "next_root 0 =  3\n",
      "next_root 1 =  3\n",
      "next_root 2 =  3\n",
      "next_root 0 =  4\n",
      "next_root 1 =  4\n",
      "next_root 2 =  4\n",
      "next_root 0 =  5\n",
      "next_root 1 =  5\n",
      "next_root 2 =  5\n",
      "next_root 3 =  5\n",
      "next_root 0 =  6\n",
      "next_root 1 =  6\n",
      "next_root 2 =  6\n",
      "next_root 0 =  7\n",
      "next_root 1 =  7\n",
      "next_root 2 =  7\n",
      "next_root 3 =  7\n",
      "next_root 0 =  8\n",
      "next_root 1 =  8\n",
      "next_root 2 =  8\n",
      "      330,   0.0000,  2.0539e-03,   2.7790e-02,         2\n",
      "next_root 0 =  9\n",
      "next_root 1 =  9\n",
      "next_root 2 =  9\n",
      "next_root 0 =  10\n",
      "next_root 1 =  10\n",
      "next_root 2 =  10\n",
      "next_root 0 =  11\n",
      "next_root 1 =  11\n",
      "next_root 2 =  11\n",
      "next_root 0 =  12\n",
      "next_root 1 =  12\n",
      "next_root 2 =  12\n",
      "next_root 0 =  13\n",
      "next_root 1 =  13\n",
      "next_root 2 =  13\n",
      "next_root 0 =  14\n",
      "next_root 1 =  14\n",
      "next_root 2 =  14\n",
      "next_root 0 =  15\n",
      "next_root 1 =  15\n",
      "next_root 2 =  15\n",
      "next_root 0 =  16\n",
      "next_root 1 =  16\n",
      "next_root 2 =  16\n",
      "next_root 0 =  17\n",
      "next_root 1 =  17\n",
      "next_root 2 =  17\n",
      "next_root 0 =  18\n",
      "next_root 1 =  18\n",
      "next_root 2 =  18\n",
      "      340,   0.0000,  2.0544e-03,   2.7167e-02,         2\n",
      "next_root 0 =  19\n",
      "next_root 1 =  19\n",
      "next_root 2 =  19\n",
      "next_root 0 =  20\n",
      "next_root 1 =  20\n",
      "next_root 2 =  20\n",
      "next_root 0 =  21\n",
      "next_root 1 =  21\n",
      "next_root 2 =  21\n",
      "next_root 0 =  22\n",
      "next_root 1 =  22\n",
      "next_root 2 =  22\n",
      "next_root 0 =  23\n",
      "next_root 1 =  23\n",
      "next_root 2 =  23\n",
      "next_root 0 =  24\n",
      "next_root 1 =  24\n",
      "next_root 2 =  24\n",
      "next_root 0 =  25\n",
      "next_root 1 =  25\n",
      "      347,   0.0000,  2.0548e-03,   2.7386e-02,         1\n",
      "Terminating due to small change in objective.\n"
     ]
    }
   ],
   "source": [
    "res = prob.Solve(max_its=10000, step_size=0.2, ftol_abs=1e-9, gtol_abs=1e-3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1152x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "    \n",
    "fig, axs = plt.subplots(ncols=4,sharex=True,figsize=(16,4))\n",
    "axs[0].plot(res.costs)\n",
    "axs[0].set_title('Dual Objective')\n",
    "axs[0].set_xlabel('Iteration')\n",
    "\n",
    "axs[1].semilogy(res.grad_sq_norms)\n",
    "axs[1].set_title('Squared Norm of Gradient')\n",
    "axs[1].set_xlabel('Iteration')\n",
    "\n",
    "axs[2].semilogy(res.step_sizes)\n",
    "axs[2].set_title('Step Size (after line search)')\n",
    "axs[2].set_xlabel('Iteration')\n",
    "\n",
    "axs[3].plot(res.line_its)\n",
    "axs[3].set_title('Line Search Iterations')\n",
    "axs[3].set_xlabel('Iteration')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compute the Barycenter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "bary = prob.Barycenter(res.dual_vars)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the images used and the barycenter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Barycenter')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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AAAAAAAAALqCBXEAAAAAAAAAAAB0BQviAAAAAAAAAAAA6AoWxAEAAAAAAAAAANAVLIgDAAAAAAAAAACgK1gQBwAAAAAAAAAAQFewIA4AAAAAAAAAAICuYEEcAAAAAAAAAAAAXcGCOAAAAAAAAAAAALrCqE43UFezZ8/O1i677LJs7ZOf/GS29uyzz5aO77vvvtk573//+7O1rbfeOltbeOGFszXolDfffDNb23nnnUvHr7zyyrb3kVIqHR89enRLjzd37txsrepnSSsmT56crV199dWl4+PGjcvOyT0XUEfTpk3L1pZeeulsrdVsQ7e49dZbs7X//d//LR0/77zz2t5HURSl44N5LMr9eyMi/uM//mPQ+gCgM+69995s7fLLLy8dv/7667Nz5syZk60dfvjh2dp1112XrbXi4IMPztYWXHDBtu4LgOHhxRdfLB0/44wzsnMefvjhbO3UU09tuoddd901W3v729+erX3kIx/J1nLXj8aOHdtwXwAA3SZ37T6i+j54TtU1/9deey1be/7557O1Rx99tHS86h7g66+/3lIfSy21VOn4pEmTsnNGjMh/FtnIkSOztVz/7uG3h0+IAwAAAAAAAAAAoCtYEAcAAAAAAAAAAEBXsCAOAAAAAAAAAACArmBBHAAAAAAAAAAAAF3BgjgAAAAAAAAAAAC6ggVxAAAAAAAAAAAAdIVRnW6g0x577LHS8eOPPz4753vf+15bezjzzDNbqq2zzjrZ2oQJE0rHt9tuu+yc/fffP1tbZpllsjXoa+7cudnazjvvnK1deeWVbe1jhRVWyNZOP/300vFtt922pX29/PLL2drFF19cOn7sscdm5/z1r3/N1qZOnZqt5XL/q1/9Kjun6t88atSwP0TQ66abbsrWnnvuuWzttttuy9Zayfzvf//7bG2jjTbK1k466aTS8c0226zpHqCTqo431157bbb2iU98Ilt76aWX+tXTUHPkkUdma2PGjMnWDjrooGxtxAi/Y8TAqToG//a3v83WHnzwwWzt7LPPLh0viiI7J6WUrW2yySbZWu78//3vf392ztprr52tOT+lv6666qps7Qtf+ELp+OzZs1vaV+694ED4z//8z2ztmmuuKR2vOn+uOibCUHPjjTdmaxdeeGHpeNVx6p577snW/vCHP2RrX/rSl0rH11hjjewcGGhf+9rXsrWvfvWrpeNV54XtVnUsveSSS7K1I444IlvLnWvm/r0REdtvv322Nm7cuGwNOmHWrFnZ2p577pmtXXTRRaXjrWZ+scUWy9Zy91/f9ra3Zec4Xg5PVa/n1157ra37uuuuu7K13HuqVlXdR23lOmPV8fzNN99s+vGqzmnf/va3N/14DA1V1wWrXkdvvPFG6fjDDz+cnTN+/Phs7YILLsjWctc7q64XVt1Tefzxx7O1P/3pT6XjI0eOzM6pWk+zww47ZGu566dV11wXWmihbI1/5u4NAAAAAAAAAAAAXcGCOAAAAAAAAAAAALqCBXEAAAAAAAAAAAB0BQviAAAAAAAAAAAA6AoWxAEAAAAAAAAAANAVLIgDAAAAAAAAAACgK4xqZKOU0vYRcVxEjIyIM4qi+PY89YkRcU5ErNj7mP9bFMUP29zrgPjYxz5WOn7TTTcNcifNu+uuu5qe88c//jFbO+OMM7K1vfbaK1v76le/Wjo+alRDLy8aNFRyOHfu3GztyiuvHLQ+zjrrrGxt6623buu+JkyYkK194hOfaGo8IuLEE0/M1r70pS9la6+88krp+E477ZSd8453vCNb+93vfpetjR49OlvrdkMhi2+++Wa2Nn369Gzt61//eun4mWeemZ1TFEW2llJqel7VnKrarbfemq1tvvnmpeOf/OQns3NOPfXUbI16GApZbFUuw7vsskt2znXXXTdQ7fyLkSNHZmvjx4/P1mbOnFk6Pm7cuH731KgZM2Zka4ceemi2tuSSS2ZrH/7wh/vV01DWzTkcCK+//nq29o1vfKN0/Hvf+152zqxZs/rdUzvccsstTde+8pWvZOd88YtfbKm26KKLZmvdThYbd8kll2Rrc+bMKR1/5zvfmZ1z/fXX97eltpg9e3a2lut/2223zc6pOuc4+OCDG29smJHF9nj22WdLx3fdddfsnKr3uY888ki2lntfeswxxzQ9J6L6PetPf/rT0vGqc9BDDjkkW1t11VWzteFMDv9V1T2Eo48+uq372mqrrbK1pZZaqunH+9Of/pStPfjgg00/XkTE3XffXTr+0Y9+NDun6lzg17/+dba28MILN95Yl5HFgTVt2rRsbcstt2xpXrs999xz2drHP/7x0vGq+yznnntutlb1b15wwQWzteGgLlm85557srWLL744W7vsssuytbq8F2tFq+eT7bb++uuXji+wwAKD1sNwUJccNtBntnb//fdnaxMnTiwdrzr3e/TRR7O1e++9N1t74403mn68qn9X7r1nRH69Q+5efET1tZnTTz89W8vdg61an1P1XnGNNdbI1oaj+X5CXEppZEScFBE7RMQ6EbF7SmmdeTb7VETcVRTFBhGxdUT8v5TSmDb3CsOWHEI9yCLUgyxC58kh1IMsQj3IInSeHEI9yCLUgyxC58khdF4jX5m6aUQ8UBTFQ0VRvBER50XEvL8qWkTE+NSzxHLhiHg+IvJLIIFmySHUgyxCPcgidJ4cQj3IItSDLELnySHUgyxCPcgidJ4cQoc1siBuuYjo+zm6j/WO9XViRKwdEU9ExB0R8ZmiKPLfmwg0Sw6hHmQR6kEWofPkEOpBFqEeZBE6Tw6hHmQR6kEWofPkEDqskQVxZV+sO++XW783Im6NiGUjYsOIODGl9C9f9p5SOiClNDWlNPWZZ55pslUY1tqWwwhZhH5wTIR6kEXoPOenUA+OiVAPsgid5/wU6sExEepBFqHznJ9ChzWyIO6xiFihz9+Xj54Vqn3tExEXFT0eiIiHI2KteR+oKIrTiqKYXBTF5CWWWKLVnmE4alsOI2QR+sExEepBFqHznJ9CPTgmQj3IInSe81OoB8dEqAdZhM5zfgod1siCuFsiYlJKaZWU0piI2C0ifjnPNo9GxHsiIlJKS0XEmhHxUDsbhWFODqEeZBHqQRah8+QQ6kEWoR5kETpPDqEeZBHqQRah8+QQOmzU/DYoimJ2SumQiLg8IkZGxJlFUdyZUjqot35KRHw9Is5KKd0RPR/9eHhRFM8OYN+19eUvfzlbmzCh9NMtB8Sll15aOn7NNddk5zzxxLwLkv/h6KOPztbuv//+0vHPf/7z2TmbbbZZtsa/Gko5TKns0197jB8/Plt75ZVXSsdXXHHF7Jxjjz02W3vrW9+ardXdIYcckq3tvvvu2dr6669fOj59+vTsnD/+8Y/Z2syZM7O1iRMnZmvdbKhk8YYbbsjWttlmm2xt7ty5peMjRuTXz+fmzG9eUcz7qdDz18qcqnlnnHFGds4mm2ySrX3yk59sqQ/aZ6hksVVz5swpHb/uuutaerxFFlkkWzvyyCObfrzll18+W/vIRz6Srd1yyy2l41V5a7cLL7wwW9ttt92yteuvvz5b+/CHP9yvnoaqbs/hQHjyySeztW9961uD2Em5quNs1Tl+u33nO9/J1s4777xs7eabby4d7/bfmJXF5lRl7fjjjy8d/8EPfpCd88ADD/S7p76+//3vZ2tV5wG33XZb0/u68sors7Wq94L77LNPtrbAAgs03Ue3kMX22W677UrHW3md10nuOHvcccdl5/zlL3/J1qZMmZKtLbjggo031kXksNxFF12Urc2aNStb23nnnUvHTz755OycxRZbLFsbO3ZstpaTu14cETFt2rRsrep6z09+8pPS8eeeey475w9/+EO2ttFGG2Vrl19+een4Kquskp3TDWRx4I0alb+1u/baa7dUyx2nrr322uycqp8hrXjppZeytfe9733Z2qc+9alsreo42+3qlMWq+3WDeb1hMB188MHZ2kILLZSt5Y7bDz3U/vVRt99+e+n4TjvtlJ1Tdf+yKotV94e7WZ1y2B9LLbVUtpa7R/jyyy9n5zz88MMt7St3blj1/meZZZbJ1pZccslsLafqvvr555+fra233nrZWu6a8VVXXZWdM3v27GztqKOOytZa+TcPdfNdEBcRURTFlIiYMs/YKX3+/ERElF+tANpCDqEeZBHqQRah8+QQ6kEWoR5kETpPDqEeZBHqQRah8+QQOquRr0wFAAAAAAAAAACA2rMgDgAAAAAAAAAAgK5gQRwAAAAAAAAAAABdwYI4AAAAAAAAAAAAusKoTjfQaWeddVbp+FFHHZWdc/7552drn/3sZ7O1CRMmNNpWvx100EGl4zfffHN2zgc/+MFs7aWXXsrWLrrootLxyy67LDunqo+11lorW6P+Ro4cma3ddttt2drdd99dOr7RRhtl5yy55JKNN9YlFltssWztggsuKB2vyvYzzzyTrW2//fbZ2m9/+9vS8YUWWig7h8GzzTbbZGsppWxtxIjydfJVOax6fVXZYIMNSsd/8pOfZOc8+eST2drUqVOztRkzZpSOVz0XBx54YLZ2yy23ZGunnnpqtgaNGjt2bOn4d77zneycL37xi9la7lwtImLLLbdsvLF+2mSTTQZtXzmrr756p1tgGFt88cWztfXWW690/I477mh7H+PGjSsdrzoujh8/PlvbfPPNs7WbbrqpdPzxxx/Pzqny6KOPZmsf/ehHS8d/97vftbQvutPGG2+crZ199tlNP167r18cd9xx2VrunDYiYrvttsvWbrzxxqb7uP7667O1P/7xj9nau9/97qb3xfBU9Xp+5JFHSsdz58gR+WPA/FxyySWl46+88kpLj9du1157bbZ28sknZ2uf//znB6IdhqgtttgiWyuKIlv7yEc+Ujq+7LLL9runRlWdg66zzjrZ2ve+971s7eCDDy4drzpHqPqZ8OCDD2Zr//M//1M6fvrpp2fnQCOWWWaZbG3KlClt3ddf/vKXbO3www/P1q6++uq29lEld18kIuKTn/xk6XjuPTgDo+qa5jHHHNPSY+buRVVdI1133XWztbe97W0t9ZEzevTobK3q+ss3vvGN0vG5c+dm59x///3Z2pFHHpmtXXfddaXj06dPz8750pe+lK3de++92doPfvCD0vHcPSkGX9Xrsur1l/t/uPDCC2fnVN3rrtrXSiutVDpetV5g0qRJLfUxZsyY0vGtttoqO2ennXbK1n72s59la7lz8qqfI7l1FRH597kREfvuu2/p+KhR3btszE8ZAAAAAAAAAAAAuoIFcQAAAAAAAAAAAHQFC+IAAAAAAAAAAADoChbEAQAAAAAAAAAA0BUsiAMAAAAAAAAAAKArWBAHAAAAAAAAAABAVxjV6QY6bdKkSaXjP/rRj7JzvvCFL2RrCy64YL97aodcH1tttVV2znnnnZetfeQjH8nWXn311dLxmTNnZue8/vrr2Rrda6WVVmqpRmM233zz0vFPfepT2TlHHXVUtnbzzTdna6eeemrp+Oc+97nsHAbPBhtskK3ddttt2dojjzxSOr700ktn54wePbrhvhqx4447tjTv6aefztauvvrq0vGq1+v06dOztTPOOCNbyx1/jz322OwcmFdKqXR8tdVWy8656qqrsrWNN9643z0NNa+88krp+Le+9a2WHu/Tn/50f9qBiIgYP358tnbNNdeUjp9++unZOZtttllLfay88sql4wsssEB2zhJLLNHSvmbPnl06fuGFF2bnHHTQQdlaLtsREXfccUfp+N13352ds/baa2drUDcLLbRQtlZ1HvCLX/yidHyPPfZoqY+f/exn2dq73/3ulh6T4afqmPPFL36xdHynnXbKzll33XVb6iN3ffKpp57KzvnmN7+Zrf34xz/O1t54443GG2vAEUccka0tuuiipeP77rtvW3tgaNh6662zteWWWy5bu/LKK0vHP/7xj/e3pY7K3Q/KnUtGRKy66qrZWu79e0T1/REYKt72trdla6ecckq2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ssgAdAPVTj/99Gzt7rvvztZuu+22bK0oiqb7aGVOq/M22GCDlvYFdfSud70rW5s2bVrp+L333puds+2227bUxyc/+cnS8R//+MfZORdffHG25hyURl1wwQXZ2uWXX95SLWfJJZfM1k444YRs7QMf+EDp+MiRI5vuYX6ee+650vGVVlqppcf72Mc+lq0dc8wxLT0m3eeHP/xhtvbZz342W8tl6umnn+53T+2w0UYbZWsnn3xytrbuuuuWji+44IL97gkGwp577lk6XvU6r4uUUrb2oQ99qHT8tNNOy85xXYZ2qLrmsN1222VrL730Uun4Aw88kJ2TO/dr1YwZM7K1I444oq37qjJqVP422qmnnpqt7bHHHgPRDsT48eOztd122y1bW3311Zve1y9+8Yum57Rqs802y9ZefPHFbK3q+YB2GDduXOl41TFgn332ydaqroXmzienTp2anbPjjjtmaxtvvHG2Nnbs2NLx3L8X2mXOnDnZ2lvf+tZsLXd/4ZBDDsnOqbpGVHV/P5eD0aNHZ+dUvX+r+jfnrmlWnau/8MIL2dqmm26arbV673Mo8wlxAAAAAAAAAAAAdAUL4gAAAAAAAAAAAOgKFsQBAAAAAAAAAADQFSyIAwAAAAAAAAAAoCtYEAcAAAAAAAAAAEBXGNXpBoaTRRZZpHT8gAMOyM6pqrXi2muvzdY+//nPZ2t33nlntvbGG2+Ujr/44ovZOe9///uztXe9613Z2hVXXFE6Pnr06OwcaNQaa6yRrd1xxx3Z2owZM5re15lnnpmtnXDCCdnaCy+80PS+XnvttWxt4YUXbvrxYCCNGzcuW/vzn//c0mPef//9peMHHnhgds4111yTraWUmu6has7OO++crR133HHZ2sc+9rHS8SWWWKLxxmAQLbvssqXjEydOzM759a9/na19+MMfztZyx76qbO+yyy7Z2m9+85tsbYEFFsjWGH6effbZQdvX008/na3ljhERER/5yEdKx6veo2200UbZWtV5be79W6v22GOPbG3ppZdu674YuiZNmtTSvKpM1cFKK62UrT3++OPZ2iabbDIQ7cCAmTx5cun4rbfemp3zuc99Llu7+uqr+9tSW3zhC18oHc9dL4Z2WXTRRbO1KVOmNP14Tz75ZLb23HPPZWunn356tnbGGWeUjr/++uuNN9ZPu+66a7b2zW9+M1tbc801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m0MKHSCHUA+yCPUgi9B5cgj1IItQD7IInSeHUA+yCPUgi9B5cggdNt8FcUVRzE4pHRIRl0fEyIg4syiKO1NKB/XW5/t9xkD/yCHUgyxCPcgidJ4cQj3IItSDLELnySHUgyxCPcgidJ4cQuc18glxURTFlIiYMs9YaUCLovi3/rcFzEsOoR5kEepBFqHz5BDqQRahHmQROk8OoR5kEepBFqHz5BA6q+u/mBkAAAAAAAAAAIDhwYI4AAAAAAAAAAAAuoIFcQAAAAAAAAAAAHSFUZ1uYDiZO3du6firr77a0uONGJFfz7jwwgu39Jit2GijjUrHF1988eycRx99tKV95ebNnj07O2fUKC/zbjVr1qxs7fe//322duWVV5aOb7vtti31sfnmm2dr48ePb+kxczbccMNsbfnlly8df+mll7JzXnjhhWztkUceydbWWmutbA364+mnn87WVlpppWwtpZStFUVROr700ktn5wzmazx3fhBRfazPzauaw9Dw8ssvl45/5jOfaenxFltssWztK1/5StOPN27cuGytLudd6623Xun4Oeeck52zzTbbDFQ7EBHV+VhhhRVKx/fbb7/snKpa7udIRMSBBx5YOn7++edn57TqiCOOKB0fM2ZM2/fF0PXKK69ka+94xztKx/fff//snFNOOSVbu/XWW7O1BRdcMFtrRdV1mf/8z/8sHT/ooIOycz7+8Y9na1dccUW2ljsX/sQnPpGdc9ttt2Vryy67bLYGQ811111XOv6hD30oO+e3v/1tS/vKXbusun5VlVOGp9dff710fM6cOdk5VeegY8eO7XdPA6nq+sYyyyyTrW288cbZ2oMPPlg6PnPmzMYbg0GSO6+98847s3NOPvnklvZVh+uMVddITzrppGxt7733Hoh2YMhYYIEFsrUvf/nL2dqhhx5aOr7vvvtm5/ziF7/I1g477LBs7Z3vfGfp+CabbJKdw/CUu4YRkT8XrppTdRyrOv976qmnSsefffbZ7Jy77747W6u6h5m7j191rj5x4sSmHy8i4p577ikdX2eddbJzqnqvuldUF+6YAgAAAAAAAAAA0BUsiAMAAAAAAAAAAKArWBAHAAAAAAAAAABAV7AgDgAAAAAAAAAAgK5gQRwAAAAAAAAAAABdYVSnGxhOLr744tLxj33sYy093rLLLputHXbYYaXjc+fOzc4ZMaK19ZHXXXdd6fijjz7a0uNVOfPMM0vHDz/88Oyc1VZbre19MHhmzJiRra255prZ2pNPPtn0vo455pim50RELLHEEtnaJptsUjq+//77Z+esvPLK2dr666/fcF/99fa3vz1be/rpp0vHx4wZM1DtMExMnTo1W0sptVTLyb2OIyKeeuqplvZVFEXTc6qOv63Ma+W5oF6+/OUvl47/+Mc/bvu+jj322KbnfOYzn8nWVlpppWxt8803Lx2fPHly0z3Mz49+9KPS8f/93/9t+76gjiZMmJCtnXvuuaXjd999d3bOHXfc0VIfd911V0vzGF4mTpyYrb3rXe8qHc9d85ifvfbaK1vbbrvtSse33HLL7JwFF1wwW6s6Js6cObN0vOocdPfdd8/Wrrjiimwt5/nnn2+pVnUtCvrKvTeKqL5mk7vOWKXq+tCGG26YrY0fP750/PTTT8/OWWWVVRruC9rtv/7rv0rHjz/++OyctddeO1vLHfsiIhZaaKHS8ar3g4sttli21oo5c+Zka1XXdF5++eW29gH9dd9992VrVRlt5Rpfq9cFW7nOuMIKK2RrVffsDjrooMYbgy70zDPPZGvjxo0rHf/LX/7S0r4uueSSbC13zWb27Nkt7atK7lpt7h4q3e3ZZ5/N1qqub/z5z38uHX/xxRezczbddNNsbdVVV83Wcj2++uqr2TmPPfZYtjZy5Mim5y299NLZOVXX0qr+XYsvvnjp+KhR3btszCfEAQAAAAAAAAAA0BUsiAMAAAAAAAAAAKArWBAHAAAAAAAAAABAV7AgDgAAAAAAAAAAgK5gQRwAAAAAAAAAAABdwYI4AAAAAAAAAAAAusKoTjcwnFx66aVtfbwnnngiW/vc5z5XOl4URXZOSqnfPUG7Vb1mn3zyyUHsJO+ZZ57J1qZMmdLUeETE2LFjs7UJEyZka88991y21opXXnmlrY8Hjdh6662ztaqfB1VamTeY+5o7d262NmJE/ncXcvOOP/74pnugXjbffPPS8ZNOOmmQOyl33HHHtTRvzJgxpeMLLbRQf9op9dJLL5WOV+UN5pV7vcyZM6elxxs9enTTc6r2NXLkyJb6yPnWt76Vre20004tPebKK6/cYjfQ47DDDisdnz59enbOr371q2zt4osvbqmWs+CCC2ZrueN5RMTTTz9dOn7HHXc03QPU1a233pqtTZ48ua37WnHFFbO1c845p+k+Jk6c2O+eoC7uvvvulmq56xsnnnhids4OO+zQeGMNmDVrVrZ2ySWXtHVfkyZNauvj0b1ee+210vFrr702O2ePPfYYqHba5oADDigd/+///u/snPHjx2drA3GtBzplxowZpePf+MY3snN+8pOfZGtV995y10/bff+vVVVrCQ499NBs7aijjhqAbqiz2bNnZ2t77rlntva73/0uW9twww1Lx6uuP1Zd66l6z5o7N1xttdWyc6rWC9x///3Z2vPPP186vv3222fnLLrootnaIosskq21cn16qN9T8QlxAAAAAAAAAAAAdAUL4gAAAAAAAAAAAOgKFsQBAAAAAAAAAADQFSyIAwAAAAAAAAAAoCtYEAcAAAAAAAAAAEBXsCAOAAAAAAAAAACArjCq0w0MJ9/+9rdLx9dZZ53snNNOOy1bmzt3brb26KOPNt7YEPLZz362dHz55Zcf5E4YLAsttFC2NnPmzGztxhtvzNZyr6Pbbrut8cYG0KxZs7K1Z555ZtD62HrrrbO1ESOsp2ZgjBs3LlurOu5V+Y//+I/S8SlTpmTnPPjgg9laSilbu+GGG0rHN9tss+wcmNeuu+5aOr7ccstl5zz++OMD1E375I5vb7zxxqD1MHbs2Gxtww03zNa+8IUvDEA31F3ufPJd73pXds6CCy6YrX36059uuoeq89MNNtig6cercvTRR2drVce+xRdfPFt7//vf36+eYNKkSaXjF154YXbO7bffnq295z3vydZeeeWVxhvrtcoqq2RriyyySLZ21VVXNb2vVo0fP750/OCDD87Oqco1NOrNN9/M1pZccsls7emnn256X1XXQbfccstsLXfcbvW9Z5Udd9yxdPyDH/xg2/dF98pd06xSdX3j17/+ddOP9/LLL2dr559/ftOPV6Uoimyt6vy0ypprrlk6ft1117X0eHSn1157LVv793//99LxH//4xwPVzr+YOHFitnb22Wdna1X3IlddddV+9QTd7Fe/+lXp+He/+92WHm8gjm/t9PGPfzxby/0MjHAPhH9W9Z5q2WWXzdaqjlWPPPJI6fidd96ZnbPUUktla1tttVW2dscdd5SOV11zqrp3XnXvYZdddikd/9CHPpSd85a3vCVbW3jhhbO13DqDZZZZJjtnqLOiAQAAAAAAAAAAgK5gQRwAAAAAAAAAAABdwYI4AAAAAAAAAAAAuoIFcQAAAAAAAAAAAHSFhhbEpZS2Tyndm1J6IKV0REn94yml23v/uyGltEH7W4XhTQ6hHmQR6kEWofPkEOpBFqEeZBE6Tw6hHmQR6kEWofPkEDprvgviUkojI+KkiNghItaJiN1TSuvMs9nDEbFVURTrR8TXI+K0djcKw5kcQj3IItSDLELnySHUgyxCPcgidJ4cQj3IItSDLELnySF03qgGttk0Ih4oiuKhiIiU0nkRsUtE3PX3DYqiuKHP9jdGxPLtbLJbLL300qXjX/ziF7Nz9t1332xt9uzZ2drNN99cOr7LLrtk54wYUY9v0N1nn32ytW9/+9ul4yNHjhyodupi2OYwpZStjR07NlvbaqutsrVbbrmldLwoisYb6+Oll17K1s4999yWHjPntttuy9Z+8IMftHVfl156abY2alQjh4+uNGyzOJQde+yxpeP/8z//k53zy1/+Mlur+rm02WabNdwX/dLVWcwd3/7whz9k5/zlL39paV/nn39+6fhiiy2WnXPSSSe1tK+5c+eWjq+77rrZObnz54iIq6++Ols77bTy6warrbZads7WW2+drVGqq3MYEXH66ac3Pee1117L1r7zne/0p51/cfnll7f18Vr1rW99K1tbccUVB7GTYavrs1hm9OjR2drGG2+crU2fPj1b22uvvUrHf/7zn2fnrLTSStnaL37xi2wt996z6j1p1Tno0Ucfna3ljulV15toybDMYpVNN900W7vvvvuytZ/85Cel48cff3x2zr333tt4Y31UHbdb8cEPfjBbO+KIf/kwiIio/plF07o+hyussELp+Pe+973snDfffDNbmzVrVrZ28sknl44//fTT2TnHHHNMtlZlm222KR3fdttts3OqjotV9ttvv9Lxt7zlLS09HqWGfBYPPvjgbO2cc84ZtD5233330vEjjzwyO2ettdYaqHYYeoZ8Fusid7629957Z+dceOGF2dqMGTP63dNAmjx5crbm/kfThm0Ox4wZk62deOKJ2VrVuWbuvt0999yTnXPFFVdka7l7IxER48ePLx1ffPHFs3Pe9ra3ZWtrr712tpazxBJLZGsXXHBBtla19ih3v6XVc+uhoJEVUMtFxLQ+f3+sdyxnv4j4TX+aAv6FHEI9yCLUgyxC58kh1IMsQj3IInSeHEI9yCLUgyxC58khdFgjH/FTthyw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",
      "text/plain": [
       "<Figure size 3168x288 with 11 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "vmax = np.max([np.max(m) for m in measures])\n",
    "fig, axs = plt.subplots(1, num_digits+1, figsize=((num_digits+1)*4,4))\n",
    "for i in range(num_digits):\n",
    "    axs[i].imshow(measures[i], origin='lower', extent=(0,1,0,1), vmin=0, vmax=vmax, cmap='Greys')\n",
    "    axs[i].set_title(\"$\\\\mu_{{ {:0d} }}$\".format(i))\n",
    "    \n",
    "axs[-1].imshow(bary, origin='lower', extent=(0,1,0,1), vmin=0, vmax=vmax, cmap='Greys')\n",
    "axs[-1].set_title('Barycenter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "545e036c4b32438aced1f6b3c8d38ca151d9c36189e05839cb0aa568fda70ddd"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
